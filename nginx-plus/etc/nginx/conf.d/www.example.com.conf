# www.example.com HTTP Redirect to HTTPS
server {
    listen 80;
    server_name www.example.com;
    return 301 https://$host$request_uri;
}
# www.example.com HTTPS
server {
    listen 443 ssl default_server;
    server_name www.example.com;
    status_zone www.example.com_https;

    # Dedicated logs
    # access_log /var/log/nginx/www.example.com.log main_ext; # access logs
    # error_log  /var/log/nginx/www.example.com_errors.log info; # error logs

    ssl_certificate /etc/ssl/example.com/example.com.crt;
    ssl_certificate_key /etc/ssl/example.com/example.com.key;
    # See best practices for security and compatibility here:
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # Include SSL configurations (uncomment one line below)
    # include includes/ssl/ssl_old.conf; # Compatiblity for very old clients. Should be used only as a last resort
    include includes/ssl/ssl_intermediate.conf; # General-purpose, recommended for almost all systems
    # include includes/ssl/ssl_modern.conf; # Modern clients: TLS 1.3 with no need backward compatibility
    # include includes/ssl/ssl_a+_strong.conf; # Based on SSL Labs A+ (https://www.ssllabs.com/ssltest/)


    #
    # App Protect:
    #

    # Enable NGINX App Protect in the relevant context/block
    # Best Practice: Set in a location block with a proxy_pass
    app_protect_enable on;

    # This is a reference to the policy file to use. If not defined, the default policy is used
    # Examples
    # default policy
    app_protect_policy_file "/etc/app_protect/conf/NginxDefaultPolicy.json";
    # default Strict policy
    # app_protect_policy_file "/etc/app_protect/conf/NginxStrictPolicy.json";
    # default API security policy
    # app_protect_policy_file "/etc/app_protect/conf/NginxApiSecurityPolicy.json";

    # This section enables the logging capability
    app_protect_security_log_enable on;

    # This is where the remote logger is defined in terms of:
    # logging options (defined in the referenced file), log server IP, log server port
    # Examples:
    # app_protect_security_log "/etc/app_protect/conf/log_default.json" /var/log/app_protect/security.log;
    # app_protect_security_log "/etc/app_protect/conf/log_default.json" stderr;
    app_protect_security_log "/etc/app_protect/conf/log_default.json" syslog:server=elk:5144;
    # app_protect_security_log "/etc/nginx/includes/nap.d/logformats/config-illegal-requests.json" syslog:server=elk:5144;
    # app_protect_security_log "/etc/nginx/includes/nap.d/logformats/log_default_splunk.json" syslog:server=elk:5144;

    #
    # App Protect DoS:
    #
    # app_protect_dos_security_log_enable on;
    # app_protect_dos_security_log "/etc/app_protect_dos/log-default.json" syslog:server=elk:5261;

    location / {
        include includes/proxy_headers/proxy_headers.conf;
        include includes/proxy_headers/keepalive.conf;
        add_header  X-Upstream  $upstream_addr always;

        #
        # App Protect DoS:
        #
        # For various directives refer: https://docs.nginx.com/nginx-app-protect-dos/directives-and-policy/learn-about-directives-and-policy/
        # app_protect_dos_enable on;
        # app_protect_dos_name "example.com/";
        # app_protect_dos_policy_file "/etc/app_protect_dos/BADOSDefaultPolicy.json";
        # app_protect_dos_monitor "www.example.com/";
        # access_log syslog:server=elk:5561 log_dos;
        proxy_pass http://app_x;
    }

    # Active Healthcheck
     location @health_check {
            # proxy_set_header Host www.example.com;
            proxy_pass http://app_x;

            health_check interval=5s fails=2 passes=2 uri=/ match=status_html_ok;
            access_log  /var/log/nginx/health_check.log main;

            internal;  # Internal request only
    }

}
